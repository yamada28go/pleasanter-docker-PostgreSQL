version: "3.7"

# 共通環境変数を定義
x-var-db-data: &APP_DB_data "db-data:/var/lib/postgresql/data"
x-var-db-arclog: &APP_DB_arclog "db-arclog:/var/lib/postgresql/arclog"

services:
  postgres-db:
    build: postgres/.
    container_name: db-container
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword1234
      - PGPASSWORD=mysecretpassword1234
      - POSTGRES_DB=testdb
      - DATABASE_HOST=localhost
      - DB_EXTENSION=pg_trgm
    command: 'postgres -c config_file="/etc/postgresql.conf"'
    volumes:
      - ./postgres/init:/docker-entrypoint-initdb.d
      - ./postgres/conf/postgresql.conf:/etc/postgresql.conf
      - *APP_DB_data
      - *APP_DB_arclog
    networks:
      - default
      - pleasanter-service-network
  pleasanter-web:
    #ports:
    #  - "80:80"
    build:
      context: pleasanter/.
      args:
        # バージョンを指定
        # 1.1.3.2 : cea284d8c57f4794da821c76d5676d0078b30ae0
        #- GIT_HASH=cea284d8c57f4794da821c76d5676d0078b30ae0
        # 1.1.5.1 : a7d57848b3d3fbd2b72389988455c14ab7347b25
        - GIT_HASH=a7d57848b3d3fbd2b72389988455c14ab7347b25
    networks:
      - default
      - pleasanter-service-network
  cron-backup:
    build:
      context: cron-backup/.
    volumes:
      - *APP_DB_data
      - *APP_DB_arclog
      # 自動バックアップされた結果は「/var/db_backup」に格納される。
      # コンテナの外からアクセスする場合は、このパスを外から見える所に配置しておく
      - db-backup:/var/db_backup
      # S3で自動バックアップする場合
      # aws cliの設定を以下パスに行う。
      # 存在しない場合はバックアップは行われない
      #- ./cron-backup/config/aws-cli:/root/.aws/
  # 通信を暗号化
  https-portal:
    image: steveltn/https-portal:1
    ports:
      - "80:80"
      - "443:443"
    links:
      - pleasanter-web
    restart: always
    environment:
      DOMAINS: "wordpress.example.com -> http://pleasanter-web"
      # 本番モードへ切り替え
      # STAGE: 'production'
      # 証明書を強制的に再取得する
      # FORCE_RENEW: 'true'
      # 容量設定
      #  CLIENT_MAX_BODY_SIZE: 0  # これだと無制限
      CLIENT_MAX_BODY_SIZE: 500M
      # HTTP強制
      HSTS_MAX_AGE: 60 # 秒
      # ログ出力設定
      ERROR_LOG: stdout
      ACCESS_LOG: stderr
      # 鍵は再利用
    volumes:
      - ssl_data:/var/lib/https-portal

volumes:
  db-data:
    driver: local
    # Compose の外ですでに作成済みの volume を指定する場合は ture を設定する。
    # そうすると、 docker-compose up 時に Compose は volume を作成しようとしません。
    # かつ、指定した volume が存在しないとエラーを raise します。
    #external: true
  db-arclog:
    driver: local
    # dbのバックアップ領域
  db-backup:
    driver: local
  ssl_data:
    driver:
      local
      # Compose の外ですでに作成済みの volume を指定する場合は ture を設定する。
      # そうすると、 docker-compose up 時に Compose は volume を作成しようとしません。
      # かつ、指定した volume が存在しないとエラーを raise します。
      #external: true
networks:
  # 他のcomposerと連携できるように、
  # ネットワーク名を明示的に設定する
  pleasanter-service-network:

